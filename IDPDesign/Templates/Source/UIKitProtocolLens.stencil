{% macro name type %}{{type.name|replace:"Protocol",""}}{% endmacro %}
{% macro implicitToOptional type %}{{type|replace:"!","?"}}{% endmacro %}

// done

{% for type in types.based.UIObjectType %}
    {% if type.kind == "protocol" and not type.name == "UIObjectType" %}

// sourcery:file:Lens+{% call name type %}Generated.swift
import UIKit
        {% if type.name == "WKWebViewProtocol" %}
import WebKit
        {% endif %}

            {% for variable in type.variables %}
                {% if not variable.isStatic %}
                    {% if variable.readAccess == "public" or variable.readAccess == "open" or variable.readAccess == "internal" %}

{{variable.attributes.available}}
public func {{variable.name}}<Object: {% call name type %}>() -> Lens<Object, {% call implicitToOptional variable.typeName %}> {
                        {% if variable.writeAccess == "" or variable.writeAccess == "private" or variable.writeAccess == "fileprivate" or variable.isComputed %}
    return Lens { $0.{{variable.name}} }
                        {% else %}
    return Lens(
        get: { $0.{{variable.name}} },
        setter: { $0.{{variable.name}} = $1 }
    )
                        {% endif %}
}
                    {% endif %}
                {% endif %}
            {% endfor %}
// sourcery:end
    {% endif %}
{% endfor %}

{% for type in types.based.UIValueType %}
    {% if type.kind == "protocol" and not type.name == "UIValueType" %}
// sourcery:file:Lens+{% call name type %}Generated.swift
import UIKit

        {% for variable in type.variables %}
            {% if not variable.isStatic %}
                {% if variable.readAccess == "public" or variable.readAccess == "open" or variable.readAccess == "internal" %}
                    {% if variable.writeAccess == "public" or variable.writeAccess == "internal" or variable.writeAccess == "open" %}
                        {% if not variable.isComputed and variable.isMutable %}

{{variable.attributes.available}}
public func {{variable.name}}() -> Lens<{% call name type %}, {{variable.typeName}}> {
    return Lens(
        get: { $0.{{variable.name}} },
        set: {
            var result = $0
            result.{{variable.name}} = $1

            return result
        }
    )
}
                        {% endif %}
                    {% endif %}
                {% endif %}
            {% endif %}
        {% endfor %}
// sourcery:end
    {% endif %}
{% endfor %}
