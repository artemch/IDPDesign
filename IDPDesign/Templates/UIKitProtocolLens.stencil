{% macro name type %}{{type.name|replace:"Protocol",""}}{% endmacro %}
{% macro implicitToOptional type %}{{type|replace:"!","?"}}{% endmacro %}

// done

{% for type in types.based.UIObjectType %}
{% if type.kind == "protocol" %}
{% if not type.name == "UIObjectType" %}
// sourcery:file:Lens+{% call name type %}GeneratedProperties.swift
import UIKit
{% if type.name == "WKWebViewProtocol" %}
import WebKit
{% endif %}

extension {% call name type %}: {{type.name}} { }
{% for variable in type.variables %}
{% if not variable.isStatic %}
{% if variable.readAccess == "public" or variable.readAccess == "open" or variable.readAccess == "internal" %}

{{variable.attributes.available}}
public extension Lens where Object: {% call name type %}, Property == {% call implicitToOptional variable.typeName %} {
    public static var {{variable.name}}: Lens {
        {% if variable.writeAccess == "" or variable.writeAccess == "private" or variable.writeAccess == "fileprivate" or variable.isComputed %}
        return Lens { $0.{{variable.name}} }
        {% else %}
        return Lens(
            get: { $0.{{variable.name}} },
            setter: { $0.{{variable.name}} = $1 }
        )
        {% endif %}
    }
}
{% endif %}
{% endif %}
{% endfor %}
// sourcery:end
{% endif %}
{% endif %}
{% endfor %}

{% for type in types.based.UIValueType %}
{% if type.kind == "protocol" %}
{% if not type.name == "UIValueType" %}
// sourcery:file:Lens+{% call name type %}GeneratedProperties.swift
import UIKit

{% for variable in type.variables %}
{% if not variable.isStatic %}
{% if variable.readAccess == "public" or variable.readAccess == "open" or variable.readAccess == "internal" %}
{% if variable.writeAccess == "public" or variable.writeAccess == "internal" or variable.writeAccess == "open" %}
{% if not variable.isComputed and variable.isMutable %}

public extension Lens where Object == {% call name type %}, Property == {{variable.typeName}} {
    public static var {{variable.name}}: Lens {
        return Lens(
            get: { $0.{{variable.name}} },
            set: {
                var result = $0
                result.{{variable.name}} = $1

                return result
            }
        )
    }
}
{% endif %}
{% endif %}
{% endif %}
{% endif %}
{% endfor %}
// sourcery:end
{% endif %}
{% endif %}
{% endfor %}

{% for type in types.based.UIOptionalObjectProtocolType %}
{% if type.kind == "protocol" %}
{% if not type.name == "UIOptionalObjectProtocolType" %}
// sourcery:file:Lens+{% call name type %}GeneratedProperties.swift
import UIKit
{% for variable in type.variables %}
{% if not variable.isStatic %}
{% if variable.readAccess == "public" or variable.readAccess == "open" or variable.readAccess == "internal" %}

{{variable.attributes.available}}
public extension Lens where Object: {% call name type %} & AnyObject, Property == {% call implicitToOptional variable.typeName %}? {
    public static var {{variable.name}}: Lens {
        {% if variable.writeAccess == "" or variable.writeAccess == "private" or variable.writeAccess == "fileprivate" or variable.isComputed %}
        return Lens { (object: {% call name type %}) -> {% call implicitToOptional variable.typeName %}? in
            object.{{variable.name}}
        }
        {% else %}
        return Lens(
            get: { (object: Object) -> {% call implicitToOptional variable.typeName %}? in
                object.{{variable.name}}
            },
            setter: { (object: Object, value: {% call implicitToOptional variable.typeName %}?) -> () in
                var mutable = object
                value.map { mutable.{{variable.name}} = $0 }
            }
        )
        {% endif %}
    }
}
{% endif %}
{% endif %}
{% endfor %}
// sourcery:end
{% endif %}
{% endif %}
{% endfor %}
